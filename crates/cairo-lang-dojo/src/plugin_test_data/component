//! > Test expansion of the hello_starknet contract.

//! > test_function_name
test_expand_contract

//! > cairo_code
#[abi]
trait IPosition {
    fn is_zero(entity_id: felt) -> bool;
}

#[derive(Component)]
struct Position { x: felt, y: felt }

impl IPosition of Position {
    #[external]
    fn is_zero(entity_id: felt) -> bool {
        return bool::True(());
    }
}

//! > generated_cairo_code
#[derive(Component)]
struct Position { x: felt, y: felt }

#[contract]
mod PositionComponent {
    struct Storage {
        world_address: felt,
        positions: Map::<felt, Position>,
     }

     // Initialize PositionComponent.
     #[external]
     fn initialize(world_addr: felt) {
         let res = world_address::read();
         match res {
             Option::Some(_) => {
                 let mut err_data = array_new::<felt>();
                 array_append::<felt>(err_data, 'PositionComponent: Already initialized.');
                 panic(err_data);
             },
             Option::None(_) => {
                world_address::write(world_addr);
             },
         }
     }

     // Set the position of an entity.
     #[external]
     fn set(entity_id: felt, value: Position) {
         let res = positions::read();
         positions::write(entity_id, value);
     }

     // Get the position of an entity.
     #[view]
     fn get(entity_id: felt) -> Position {
         return positions::read(entity_id);
     }
}

//! > expected_diagnostics
